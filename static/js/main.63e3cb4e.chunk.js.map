{"version":3,"sources":["components/Task.js","components/TaskList.js","components/TaskComposer.js","App.js","serviceWorker.js","index.js"],"names":["Task","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","handleDelete","inherits","createClass","key","value","onTaskToggleComplete","task","id","onTaskDelete","react_default","a","createElement","className","completed","onClick","text","React","Component","TaskList","apply","arguments","tasks","map","Task_Task","TaskComposer","state","handleChange","handleKeyPress","event","setState","target","onTaskAdd","type","placeholder","autoFocus","onChange","onKeyPress","App","nextId","handleTaskAdd","handleTaskToggleComplete","handleTaskDelete","undefined","TaskList_TaskList","sorted","TaskComposer_TaskComposer","uncomplete","complete","push","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63e3cb4e.chunk.js","sourcesContent":["// Import React and CSS\nimport React from 'react';\nimport './Task.css';\n\nexport class Task extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Bind 'this' to handlers\n        this.handleClick = this.handleClick.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    // Handle click event to toggle completed status of task\n    handleClick() {\n        this.props.onTaskToggleComplete(\n            this.props.task.id\n        );\n    }\n\n    // Handle delete click to delete current task\n    handleDelete() {\n        this.props.onTaskDelete(\n            this.props.task.id\n        );        \n    }\n\n    render() {\n        const task = this.props.task;\n\n        return (\n           <li \n            className={ \"list-group-item todo-item \" + (task.completed && 'item-done') }\n            onClick={ this.handleClick }>\n                {/* Show icon depending on current completed status */}\n                <i className={ \"far \" + (task.completed ? 'fa-check-circle' : 'fa-circle') }></i>\n                \n                <span className=\"item-text\">{ task.text }</span>\n\n                {/* Delete task */}\n                <span className=\"float-right\" onClick={ this.handleDelete }>\n                    <i className=\"fas fa-trash\"></i>\n                </span>\n            </li>\n        );\n    }\n}","// Import React and CSS\nimport React from 'react';\nimport './TaskList.css';\n\n// Import Task component\nimport { Task } from './Task';\n\nexport class TaskList extends React.Component {\n    render() {\n        // Create task elements\n        const tasks = this.props.tasks.map(task => \n            <Task \n                task={ task } \n                key={ task.id }\n                onTaskToggleComplete={ this.props.onTaskToggleComplete }\n                onTaskDelete={ this.props.onTaskDelete } />\n        );\n\n        return (\n            <ul className=\"list-group list-group-flush\">\n                { tasks }\n            </ul>\n        );\n    }\n}","// Import React and CSS\nimport React from 'react';\nimport './TaskComposer.css';\n\nexport class TaskComposer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ''\n        };\n\n        // Bind 'this' to handlers\n        this.handleChange = this.handleChange.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n\n    // Handle input change event to update state value\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    // Handle keyPress to add task on Enter key\n    handleKeyPress(event) {\n        if (event.key === 'Enter' && this.state.value !== '') {\n            // Add task\n            this.props.onTaskAdd(this.state.value);\n\n            // Clear input\n            this.setState({\n                value: ''\n            });\n        }\n    }\n\n\n    render() {\n        return (\n            <input \n                type=\"text\" \n                className=\"form-control add-task\" \n                placeholder=\"Add a task...\" \n                autoFocus\n                value={this.state.value} \n                onChange={this.handleChange}\n                onKeyPress={ this.handleKeyPress } />\n        );\n    }\n}","// Import React\nimport React from 'react';\nimport './App.css';\n\n// Import components\nimport { TaskList } from './components/TaskList';\nimport { TaskComposer } from './components/TaskComposer';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Set state\n    this.state = {\n      // Empty tasks object\n      // This will later hold the created tasks\n      tasks: {},\n\n      // ID for the next task\n      nextId: 0\n    }\n\n    // Bind 'this' to handlers\n    this.handleTaskAdd = this.handleTaskAdd.bind(this);\n    this.handleTaskToggleComplete = this.handleTaskToggleComplete.bind(this);\n    this.handleTaskDelete = this.handleTaskDelete.bind(this);\n  }\n\n  // Add new, uncompleted task to the tasks array\n  // text: Text for the new task\n  handleTaskAdd(text) {\n    const id = this.state.nextId;\n\n    let tasks = this.state.tasks;\n    tasks[id] = {\n      id,\n      text,\n      completed: false\n    };\n\n    this.setState({\n      tasks,\n      nextId: id + 1\n    });\n  }\n\n  // Toggle the completed status of a task\n  // task: ID of the task to toggle\n  handleTaskToggleComplete(task) {\n    if (this.state.tasks[task]) {\n      let tasks = this.state.tasks;\n      tasks[task].completed = !tasks[task].completed;\n\n      this.setState({\n        tasks\n      });\n    }\n  }\n  \n  // Delete task from task list\n  // task: ID of the task to delete\n  handleTaskDelete(task) {\n    if (this.state.tasks[task]) {\n      let tasks = this.state.tasks;\n      tasks[task] = undefined;\n\n      this.setState({\n        tasks\n      });\n    }\n  }\n\n  // Sort tasks by uncomplete and complete\n  get sorted() {\n      let uncomplete = [];\n      let complete = [];\n\n      for (let task in this.state.tasks) {\n        if(this.state.tasks[task]) {\n          if (this.state.tasks[task].completed) {\n              complete.push(this.state.tasks[task]);\n          } else {\n              uncomplete.push(this.state.tasks[task]);\n          }\n        }\n      }\n\n      let sorted = uncomplete.concat(complete);\n\n      return sorted;\n  }\n\n  render() {\n    return (\n      <div className=\"container d-flex justify-content-center mt-4\">\n        <div className=\"card w-100\">\n            <div className=\"card-header text-center\">\n                Todo\n            </div>\n            <div className=\"card-body\">\n              <TaskList \n                tasks={ this.sorted }\n                onTaskToggleComplete={ this.handleTaskToggleComplete }\n                onTaskDelete={ this.handleTaskDelete } />\n              <TaskComposer onTaskAdd={ this.handleTaskAdd } />\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Import React libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Import main css\nimport './index.css';\n\n// Import main app component\nimport App from './App';\n\n// Import service worker\nimport * as serviceWorker from './serviceWorker';\n\n// Render app\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Unregister service worker\nserviceWorker.unregister();\n"],"sourceRoot":""}